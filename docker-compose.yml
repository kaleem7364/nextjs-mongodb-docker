version: '3.8'

services:
  mongo1:
    image: mongo:5.0
    container_name: mongo1
    command: mongod --replSet rs0 --bind_ip_all
    ports:
      - "27017:27017"
    volumes:
      - mongo-data1:/data/db
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017 --quiet
      interval: 5s
      timeout: 5s
      retries: 5

  mongo2:
    image: mongo:5.0
    container_name: mongo2
    command: mongod --replSet rs0 --bind_ip_all
    ports:
      - "27018:27017"
    volumes:
      - mongo-data2:/data/db
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017 --quiet
      interval: 5s
      timeout: 5s
      retries: 5

  mongo3:
    image: mongo:5.0
    container_name: mongo3
    command: mongod --replSet rs0 --bind_ip_all
    ports:
      - "27019:27017"
    volumes:
      - mongo-data3:/data/db
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017 --quiet
      interval: 5s
      timeout: 5s
      retries: 5

  init-mongo:
    image: mongo:5.0
    depends_on:
      mongo1:
        condition: service_healthy
      mongo2:
        condition: service_healthy
      mongo3:
        condition: service_healthy
    command: >
      bash -c "
      mongosh --host mongo1 --eval 'rs.initiate({
        _id: \"rs0\",
        members: [
          {_id: 0, host: \"mongo1:27017\"},
          {_id: 1, host: \"mongo2:27017\"},
          {_id: 2, host: \"mongo3:27017\"}
        ]
      })'
      "

  app:
    build: .
    container_name: next-app
    ports:
      - "3000:3000"
    environment:
      - DATABASE_URL=mongodb://mongo1:27017,mongo2:27017,mongo3:27017/my-db?replicaSet=rs0
    depends_on:
      init-mongo:
        condition: service_completed_successfully
    volumes:
      - .:/app
      - /app/node_modules
    command: >
      sh -c "
      npx prisma generate &&
      npx prisma db push &&
      npx prisma db seed &&
      npm run start
      "

volumes:
  mongo-data1:
  mongo-data2:
  mongo-data3:
